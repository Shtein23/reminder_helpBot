import asyncio
from dispatcher import bot
from aiogram import types
from main import BotDB, dp
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
import aiogram.utils.markdown as md
from datetime import datetime


# —Å–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º—É –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è
class RemOnDate(StatesGroup):
    date = State()
    time = State()
    msg = State()


class RemOnTime(StatesGroup):
    time = State()
    msg = State()


# keyboards.py
inline_btn_1 = InlineKeyboardButton('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É', callback_data='RemOnDate')
inline_btn_2 = InlineKeyboardButton('–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='RemOnTime')
inline_btns = InlineKeyboardMarkup().add(inline_btn_1).add(inline_btn_2)

button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')
greet_kb1 = ReplyKeyboardMarkup(resize_keyboard=True).add(button_hi)


async def on_startup(x):
    asyncio.create_task(check_reminders())


# –§—É–Ω–∫—Ü–∏—è –Ω–∞–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)

    await message.bot.send_message(message.from_user.id,
                                   "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                                   "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å "
                                   "—Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ.\n"
                                   "–ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É.",
                                   reply_markup=inline_btns)


@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/help` command
    """
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /r –∏–ª–∏ /remind, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
                        "–†–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!")


# ===================================== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ==========================================================
@dp.message_handler(commands=['r', 'remind'])
@dp.message_handler(Text(equals='–Ω–∞–ø–æ–º–Ω–∏—Ç—å', ignore_case=True), state='*')
async def reminder_handler(message: types.Message):
    await message.reply("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", reply_markup=inline_btns)


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–û–ö')


# ===================================== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ==============================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è
@dp.callback_query_handler(lambda c: c.data == 'RemOnTime')
async def process_callback_remontime(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await RemOnTime.time.set()
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                                                        '–§–æ—Ä–º–∞—Ç: —á—á:–º–º (10:00)')


# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
@dp.message_handler(state=RemOnTime.time)
async def process_time_remontime(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # print(datetime.strptime(str(datetime.now().date().isoformat()) + " " + message.text, '%Y-%m-%d %H:%M'))
        data['time'] = datetime.strptime(str(datetime.now().date().isoformat()) + " " + message.text, '%Y-%m-%d %H:%M')

    await RemOnTime.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")


# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
@dp.message_handler(state=RemOnTime.msg)
async def process_msg_remontime(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
        BotDB.add_record(message.from_user.id, True, str(data['time']), message.text)
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - {md.bold(data["msg"])}'),
                md.text(f'–í—Ä–µ–º—è - {md.bold(data["time"].hour)}:{md.bold(data["time"].minute)}'),
                sep='\n',
            ),
            parse_mode=ParseMode.MARKDOWN,
        )

    await state.finish()


# ===================================== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É ==================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É
@dp.callback_query_handler(lambda c: c.data == 'RemOnDate')
async def process_callback_remondate(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await RemOnDate.date.set()
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')


# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –¥–∞—Ç–æ–π
@dp.message_handler(state=RemOnDate.date)
async def process_date_remondate(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = datetime.strptime(message.text + "." + str(datetime.now().year), '%d.%m.%Y')
        print(data['date'])
    await RemOnDate.next()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n'
                        '–§–æ—Ä–º–∞—Ç: —á—á:–º–º (10:00)')


# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
@dp.message_handler(state=RemOnDate.time)
async def process_time_remondate(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = datetime.strptime(str(data['date'].date()) + " " + message.text, '%Y-%m-%d %H:%M')

    await RemOnDate.next()
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
@dp.message_handler(state=RemOnDate.msg)
async def process_msg_remondate(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['msg'] = message.text
        BotDB.add_record(message.from_user.id, False, str(data['time']), message.text)
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - {md.bold(data["msg"])}'),
                md.text(f'–î–∞—Ç–∞ - {md.bold(data["time"].day)}.{md.bold(data["time"].month)}'),
                md.text(f'–í—Ä–µ–º—è - {md.bold(data["time"].hour)}:{md.bold(data["time"].minute)}'),
                sep='\n',
            ),
            parse_mode=ParseMode.MARKDOWN,
        )

    await state.finish()


# ===================================== –¶–∏–∫–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ========================================
async def check_reminders():
    while True:
        for id in BotDB.get_users():

            for rec in BotDB.get_records(id[0]):
                # print(rec)
                now = datetime.now()
                if int(rec[2]):
                    if datetime.strptime(rec[3], '%Y-%m-%d %H:%M:%S').hour == now.hour and \
                            datetime.strptime(rec[3], '%Y-%m-%d %H:%M:%S').minute == now.minute:
                        await bot.send_message(id[1], f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n'
                                                      f'{rec[4]}')
                else:
                    if datetime.strptime(rec[3], '%Y-%m-%d %H:%M:%S').hour == now.hour and \
                            datetime.strptime(rec[3], '%Y-%m-%d %H:%M:%S').minute == now.minute:
                        await bot.send_message(id[1], f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n'
                                                      f'{rec[4]}')
                        BotDB.remove_record(rec[0])

        await asyncio.sleep(60)
